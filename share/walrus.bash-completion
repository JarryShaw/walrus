#!/usr/bin/env bash

# Indicates there are no completions
__walrus_comp_null() {
  COMPREPLY=""
}

__walrus_comp_words_include() {
  local i=1
  while [[ "$i" -lt "$COMP_CWORD" ]]
  do
    if [[ "${COMP_WORDS[i]}" = "$1" ]]
    then
      return
    fi
    (( i++ ))
  done
  return 1
}

__walrus_comp() {
  # break $1 on space, tab, and newline characters,
  # and turn it into a newline separated list of words
  local list s sep=$'\n' IFS=$' \t\n'
  local cur="${COMP_WORDS[COMP_CWORD]}"

  for s in $1
  do
    __walrus_comp_words_include "$s" && continue
    list="$list$s$sep"
  done

  IFS="$sep"
  COMPREPLY=($(compgen -W "$list" -- "$cur"))
}

###########################################################
# Bash Completion for `walrus`
###########################################################

_walrus() {
  local cur prev opts cmds
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"
  opts="--help --version --no-archive --dismiss --no-linting"
  cmds="--archive-path --encoding --python --linesep"

  if [[ ${prev} =~ "--help|--version|--no-archive" ]]
  then
    __walrus_comp_null
    return
  elif [[ ${prev} =~ "--archive-path|--encoding|--linesep" ]]
  then
    __walrus_comp_null
    return
  elif [[ ${prev} =~ "--python" ]]
  then
    __walrus_comp "3.8"
    return
  fi

  if [[ ${cur} =~ -* ]]
  then
    __walrus_comp "${opts} ${cmds}"
    return
  elif [[ ${cur} == * ]]
  then
    __walrus_comp "$(ls *.py *.pyw 2>/dev/null | xargs)"
    return
  fi
}

# keep around for compatibility
_walrus_to_completion() {
  _walrus
}

complete -o bashdefault -o default -F _walrus             walrus
